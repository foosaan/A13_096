package com.example.projectakhirpam_a13.ui.viewModel.event

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.projectakhirpam_a13.model.Event
import com.example.projectakhirpam_a13.repository.EventRepository
import kotlinx.coroutines.launch

class EventInsertViewModel(private val EventRepository: EventRepository) : ViewModel() {
    var uiState by mutableStateOf(EventInsertUiState())
        private set

    fun EventUpdateInsertState(insertUiEvent: EventInsertUiEvent) {
        uiState = EventInsertUiState(insertUiEvent = insertUiEvent)
    }

    fun insertEvent() {
        viewModelScope.launch {
            try {
                EventRepository.insertEvent(uiState.insertUiEvent.toEvent())
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
}

data class EventInsertUiState(
    val insertUiEvent: EventInsertUiEvent = EventInsertUiEvent()
)



data class EventInsertUiEvent(
    val idEvent: Int = 0, // Default to 0, since ID may be auto-generated by the server
    val namaEvent: String = "",
    val deskripsiEvent: String = "",
    val tanggalEvent: String = "",
    val lokasiEvent: String = ""
)

fun EventInsertUiEvent.toEvent(): Event = Event(
    id_event = idEvent,
    nama_event = namaEvent,
    deskripsi_event = deskripsiEvent,
    tanggal_event = tanggalEvent,
    lokasi_event = lokasiEvent
)

fun Event.toEventUiState(): EventInsertUiState = EventInsertUiState(
    insertUiEvent = toInsertEventUiEvent()
)

fun Event.toInsertEventUiEvent(): EventInsertUiEvent = EventInsertUiEvent(
    idEvent = id_event,
    namaEvent = nama_event,
    deskripsiEvent = deskripsi_event,
    tanggalEvent = tanggal_event,
    lokasiEvent = lokasi_event
)

